* Editor

#+BEGIN_SRC emacs-lisp

  ;; use ibuffer as default buffer management
  (require 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; use-package ???
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)

  ;; use Alt+Shift+s/z/x/c key binds to switch bewteen windows
  (global-set-key (kbd "M-S") 'windmove-up)
  (global-set-key (kbd "M-X") 'windmove-down)
  (global-set-key (kbd "M-C") 'windmove-right)
  (global-set-key (kbd "M-Z") 'windmove-left)

  ;; just ask for y/n instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; "C-x k" -> kill-this-buffer
  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  ;; optimize mousewheel scrolling
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)


  ;; GUI
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; http://stackoverflow.com/questions/11679700/emacs-disable-beep-when-trying-to-move-beyond-the-end-of-the-document
  (defun my-bell-function ())

  (setq ring-bell-function 'my-bell-function)
  (setq visible-bell nil)

  ;; Enable C-c C-u to upper case whole regoin
  (put 'upcase-region 'disabled nil)

  ;; mode line
  (use-package all-the-icons)
  ;; (use-package powerline)
  ;; (powerline-default-theme)

  ;; set PATH
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
  ;; set exec-path
  (setq exec-path (append exec-path '("/usr/local/bin/")))

  ;; Time Stamp
  (add-hook 'before-save-hook 'time-stamp)
  (defun cl/insert-time-stamp-string()
    "Insert time stamp string at current position"
    (interactive)
    (insert "Time-stamp:  < >")) 

  ;; backups
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  (show-paren-mode 1)

  (global-linum-mode t)
  (set-face-foreground 'linum "#6e6e6e")

  (use-package multiple-cursors
    :config
    ;; multiple-cursors
    ;; (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    ;; (global-set-key (kbd "C-+") 'mc/mark-next-like-this)
    ;; (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    ;; From active region to multiple cursors:
    ;; (global-set-key (kbd "C-c c r") 'set-rectangular-region-anchor)
    ;; (global-set-key (kbd "C-c c c") 'mc/edit-lines)
    ;; (global-set-key (kbd "C-c c e") 'mc/edit-ends-of-lines)
    ;; (global-set-key (kbd "C-c c a") 'mc/edit-beginnings-of-lines)
    )

  ;; shell
  (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t) 
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on t)
  (add-hook 'shell-mode-hook
	    (lambda ()
	      (define-key shell-mode-map (kbd "<M-up>") 'comint-previous-input)
	      (define-key shell-mode-map (kbd "<M-down>") 'comint-next-input)
	      )
	    )

#+END_SRC

* Personal info

#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Conrad Lo"
	user-mail-address "email@conradlo.com")

#+END_SRC

* Package/Mode

** org

#+BEGIN_SRC emacs-lisp

  ;; http request in org-mode babel
  (use-package ob-http :ensure t) 

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)
     (python . t)
     (ruby . t)
     (http . t)))

  (setq org-confirm-babel-evaluate nil
	org-src-fontify-natively t
	org-src-tab-acts-natively t)

#+END_SRC

** markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

** clojure

#+BEGIN_SRC emacs-lisp

  (unless (package-installed-p 'clojure-mode)
    (package-install 'clojure-mode))

  ;; Enter cider mode when entering the clojure major mode
  (add-hook 'clojure-mode-hook 'cider-mode)

  ;; Turn on auto-completion with Company-Mode
  (global-company-mode)
  (add-hook 'cider-repl-mode-hook #'company-mode)
  (add-hook 'cider-mode-hook #'company-mode)

  ;; Replace return key with newline-and-indent when in cider mode.
  (add-hook 'cider-mode-hook '(lambda () (local-set-key (kbd "RET") 'newline-and-indent)))

  ;; parinfer
  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
	       pretty-parens  ; different paren styles for different modes.
	       evil           ; If you use Evil.
	       lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
	       paredit        ; Introduce some paredit commands.
	       smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
	       smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))

#+END_SRC

** git
#+BEGIN_SRC emacs-lisp

  (use-package magit
    :ensure t
    :bind (("C-c m" . magit-status)))

  (use-package magit-gitflow
    :ensure t
    :config
    (add-hook 'magit-mode-hook 'turn-on-magit-gitflow))

#+END_SRC
** term
#+BEGIN_SRC emacs-lisp
  (require 'multi-term)
  (setq multi-term-program "/bin/bash")
#+END_SRC
** others

#+BEGIN_SRC emacs-lisp

  ;; js

  (use-package js2-mode
    :ensure t)

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (setq js2-basic-offset 2)

  ;; REST
  (use-package restclient
    :ensure t)

#+END_SRC
